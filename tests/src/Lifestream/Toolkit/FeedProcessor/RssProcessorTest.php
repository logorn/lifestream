<?php

namespace Lifestream\Toolkit\FeedProcessor;

use Buzz\Message;


/**
 * Test class for RssProcessor.
 * Generated by PHPUnit on 2011-07-25 at 21:16:36.
 */
class RssProcessorTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var RssProcessor
     */
    protected $object;

    /**
     *
     * @var Browser
     */
    protected $browser;


    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->browser = new \Buzz\Browser(new \Buzz\Client\Mock\LIFO());
        $feedUrl = 'https://twitter.com/statuses/user_timeline.rss?screen_name=lyrixx';
        $this->object = new RssProcessor($this->browser, $feedUrl);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    public function testExceptionIfNullHttpClient()
    {
        $this->setExpectedException('Exception');

        $this->object->setHttpClient(null);

        $this->object->process();
    }

    public function testExceptionIfNullFeedUrl()
    {
        $this->setExpectedException('Exception');

        $this->object->setFeedUrl(null);

        $this->object->process();
    }

    public function testExceptionIfEmptyResponse()
    {
        $this->setExpectedException('Exception');

        $this->browser->getClient()->sendToQueue(new Message\Response());

        $this->object->process();
    }

    public function testExceptionIfBadStatusCode()
    {
        $this->setExpectedException('Exception');

        $response = new Message\Response();
        $response->setContent('<html><head></head><body></body></html>');
        $response->setHeaders(array('HTTP/1.1 404'));
        $this->browser->getClient()->sendToQueue($response);

        $this->object->process();
    }

    public function testRequestDatas()
    {
        $response = new Message\Response();
        $response->setContent($this->getResponseSample());
        $response->setHeaders(array('HTTP/1.1 200 OK'));
        $this->browser->getClient()->sendToQueue($response);

        $this->object->process();

        $datas = $this->object->getDatas();
        $this->assertEquals(4, count($datas), 'check if every status is present');

        $firstStatus = $datas[0];
        $this->assertEquals('lyrixx: Les mac users, quel logiciel vous utilisez pour les torrentsÂ ?', $firstStatus['text'], 'Check text');
        $this->assertEquals('http://twitter.com/lyrixx/statuses/95561472180101121', $firstStatus['url'], 'Check url');
        $this->assertEquals('Mon, 25 Jul 2011 18:30:05 +0000', $firstStatus['date'], 'Check date');
        $this->assertEmpty($firstStatus['categories'], 'Check categories');
    }

    protected function getResponseSample()
    {
        return <<<EOF
<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:georss="http://www.georss.org/georss" xmlns:twitter="http://api.twitter.com">
  <channel>
    <title>Twitter / lyrixx</title>
    <link>http://twitter.com/lyrixx</link>
    <atom:link type="application/rss+xml" href="https://twitter.com/statuses/user_timeline.rss?screen_name=lyrixx" rel="self"/>
    <description>Twitter updates from Gregoire Pineau / lyrixx.</description>
    <language>en-us</language>
    <ttl>40</ttl>
  <item>
    <title>lyrixx: Les mac users, quel logiciel vous utilisez pour les torrents&#160;?</title>
    <description>lyrixx: Les mac users, quel logiciel vous utilisez pour les torrents&#160;?</description>
    <pubDate>Mon, 25 Jul 2011 18:30:05 +0000</pubDate>
    <guid>http://twitter.com/lyrixx/statuses/95561472180101121</guid>
    <link>http://twitter.com/lyrixx/statuses/95561472180101121</link>
    <twitter:source>&lt;a href="http://www.tweetdeck.com" rel="nofollow"&gt;TweetDeck&lt;/a&gt;</twitter:source>
    <twitter:place/>
  </item>
  <item>
    <title>lyrixx: RT @InformatHic: Build your SoapServer with Symfony2 and BeSimpleSoapBundle : http://bit.ly/mVPoQP #symfony2bundles</title>
    <description>lyrixx: RT @InformatHic: Build your SoapServer with Symfony2 and BeSimpleSoapBundle : http://bit.ly/mVPoQP #symfony2bundles</description>
    <pubDate>Mon, 25 Jul 2011 08:40:18 +0000</pubDate>
    <guid>http://twitter.com/lyrixx/statuses/95413048445116417</guid>
    <link>http://twitter.com/lyrixx/statuses/95413048445116417</link>
    <twitter:source>&lt;a href="http://www.tweetdeck.com" rel="nofollow"&gt;TweetDeck&lt;/a&gt;</twitter:source>
    <twitter:place/>
  </item>
  <item>
    <title>lyrixx: RT @mageekguy: #PHP, la r&#233;volution continue - http://t.co/V9WSE5s</title>
    <description>lyrixx: RT @mageekguy: #PHP, la r&#233;volution continue - http://t.co/V9WSE5s</description>
    <pubDate>Sat, 23 Jul 2011 21:57:47 +0000</pubDate>
    <guid>http://twitter.com/lyrixx/statuses/94888969061408768</guid>
    <link>http://twitter.com/lyrixx/statuses/94888969061408768</link>
    <twitter:source>&lt;a href="http://www.echofon.com/" rel="nofollow"&gt;Echofon&lt;/a&gt;</twitter:source>
    <twitter:place/>
  </item>
  <item>
    <title>lyrixx: RT @symfony: Symfony2: The Roadmap to Final http://bit.ly/nm7WVn</title>
    <description>lyrixx: RT @symfony: Symfony2: The Roadmap to Final http://bit.ly/nm7WVn</description>
    <pubDate>Sat, 23 Jul 2011 01:33:45 +0000</pubDate>
    <guid>http://twitter.com/lyrixx/statuses/94580931461005312</guid>
    <link>http://twitter.com/lyrixx/statuses/94580931461005312</link>
    <twitter:source>&lt;a href="http://www.echofon.com/" rel="nofollow"&gt;Echofon&lt;/a&gt;</twitter:source>
    <twitter:place/>
  </item>
  </channel>
</rss>

EOF;

    }



}
