<?php
namespace Lifestream\Model;

/**
 * Test class for ServiceStream.
 * Generated by PHPUnit on 2011-04-17 at 20:52:37.
 */
class ServiceStreamTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var ServiceStream
	 */
	protected $object;
	protected $status;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->object = new ServiceStream();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {

	}

	public function testAddStatusWithoutText() {
		$option = array();
		$this->setExpectedException('Exception');
		$this->object->addStatus($option);
	}

	public function testAddStatus() {
		$this->assertEmpty($this->object->getStream(), 'Check if stream is empty');
		$datas = array(
			'text' => 'some text',
			'date' => '2000-01-01',
			'url' => 'http://exemple.com',
			'option1' => 'my first option',
			'option2' => 'my second option',
			'option3' => 'my third option',
		);
		$this->object->addStatus($datas);

		$stream = $this->object->getStream();
		$status = $stream[0];

		$this->assertEquals($datas['text'], $status->__ToString(), 'Check ToString ()');
		$this->assertEquals($datas['text'], $status->text, 'Check Text');
		$this->assertEquals($datas['date'], $status->date, 'Check Date');
		$this->assertEquals($datas['url'],  $status->url,  'Check Url');
		$options = array(
			'option1' => 'my first option',
			'option2' => 'my second option',
			'option3' => 'my third option',
		);
		$this->assertEquals($options, $status->options, 'Check Options');
	}

	public function testGetStream() {
		$this->assertEmpty($this->object->getStream(), 'Check if stream is empty');
		$datas = array('text' => 'text');
		$nbStatus = 5;
		for ($i = 1 ; $i <= $nbStatus ; $i++){
			$this->object->addStatus($datas);
		}
		$this->assertEquals($nbStatus, count($this->object->getStream()), sprintf('Check if there are %d status in stream',$nbStatus));
	}

	public function testGetStreamWithMaxItem(){
		$datas = array('text' => 'text');
		$nbStatus = 50;
		for ($i = 1 ; $i <= $nbStatus ; $i++){
			$this->object->addStatus($datas);
		}
		$maxItem = 10;
		$this->assertEquals($maxItem, count($this->object->getStream($maxItem)), sprintf('Check max item (%d)',$maxItem));
	}

    public function testSetStream(){
        $steamCopy = clone $this->object;
		$datas = array('text' => 'text');
		$nbStatus = 10;
		for ($i = 1 ; $i <= $nbStatus ; $i++){
			$this->object->addStatus($datas);
		}
		$steamCopy->setStream($this->object->getStream());
		$this->assertEquals($this->object, $steamCopy );
	}

}
